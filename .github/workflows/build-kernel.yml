name: Build Glow-Delta Kernel for Marble Device

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 增加超时时间

    env:
      DEVICE_CODENAME: marble
      KERNEL_NAME: Glow-Delta
      # 关键修复：使用临时目录作为ccache路径，避免权限问题
      CCACHE_DIR: /tmp/ccache
      CCACHE_COMPRESS: 1  # 启用压缩节省空间

    steps:
    - name: 🚀 Checkout Kernel Source
      uses: actions/checkout@v4
      with:
        submodules: recursive
        path: kernel_source
        fetch-depth: 0  # 获取完整提交历史

    - name: 📦 Install Build Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git flex bison build-essential libncurses-dev libssl-dev bc \
          ccache rsync zlib1g-dev python3-minimal libelf-dev libxml2-utils \
          gnupg wget unzip lz4 cpio kmod liblz4-tool
          
        # 安装最新版ccache并配置
        sudo apt-get install -y ccache
        echo "Max cache size = 2.0G" | sudo tee -a /etc/ccache.conf
        sudo chmod 777 /tmp  # 确保临时目录可写
        ccache -s  # 显示ccache初始状态

    - name: ⚙️ Setup Android Clang Toolchain
      uses: kdrag0n/android-toolchains-action@v1
      with:
        version: r487747b # 2024年稳定版本
        target: aarch64-linux-android
        install-dir: /tmp/toolchain  # 使用临时目录避免权限问题

    - name: 🛠️ Configure Build Environment
      run: |
        echo "ARCH=arm64" >> $GITHUB_ENV
        echo "CROSS_COMPILE=aarch64-linux-android-" >> $GITHUB_ENV
        echo "CC=clang" >> $GITHUB_ENV
        echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
        
        # 关键修复：使用正确的工具链路径
        echo "PATH=/tmp/toolchain/bin:$PATH" >> $GITHUB_ENV
        
        # 获取精确的git描述用于版本
        KERNEL_VERSION=$(git -C kernel_source describe --always --dirty --tags)
        echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date +%Y%m%d-%H%M)" >> $GITHUB_ENV
        
        # 配置ccache环境变量
        echo "USE_CCACHE=1" >> $GITHUB_ENV
        echo "CCACHE_BASEDIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
        mkdir -p $CCACHE_DIR
        chmod 777 $CCACHE_DIR  # 确保ccache目录可写

    - name: 🧹 Clean Previous Build
      run: |
        make O=out clean && make O=out mrproper
        # 清除旧的缓存锁文件
        find $CCACHE_DIR -name '*.lock' -exec rm -f {} +
      working-directory: ./kernel_source

    - name: ⚙️ Configure Kernel (defconfig)
      run: |
        # 关键修复：使用显式绝对路径指定编译器
        make O=out CC="ccache clang" ${DEVICE_CODENAME}_defconfig
      working-directory: ./kernel_source
      env:
        DEVICE_CODENAME: ${{ env.DEVICE_CODENAME }}

    - name: 🔨 Build Kernel Image
      run: |
        # 关键优化：添加详细日志输出用于调试
        echo "Starting kernel build with $(nproc --all) jobs"
        echo "Current PATH: $PATH"
        echo "CCACHE_DIR contents:"
        ls -l $CCACHE_DIR
        ccache -s
        
        # 实际编译命令
        time make -j$(nproc --all) O=out \
          CC="ccache clang" \
          ARCH=arm64 \
          CROSS_COMPILE=aarch64-linux-android- \
          HOSTCC="gcc"  # 修复host工具链问题
          
        ccache -s  # 显示缓存统计
      working-directory: ./kernel_source
      timeout-minutes: 90

    - name: 📥 Prepare AnyKernel3
      uses: actions/checkout@v4
      with:
        repository: osm0sis/AnyKernel3
        path: AnyKernel3
        ref: master

    - name: 📦 Package Kernel
      run: |
        # 关键修复：确保输出文件存在
        echo "Checking kernel build artifacts:"
        ls -l out/arch/arm64/boot/
        
        # 为Marble设备使用正确的内核格式
        KERNEL_IMAGE=out/arch/arm64/boot/Image.lz4
        DTBO_IMAGE=out/arch/arm64/boot/dtbo.img
        
        if [ ! -f $KERNEL_IMAGE ]; then
          echo "Error: Kernel image not found at $KERNEL_IMAGE!"
          exit 1
        fi
        
        cp $KERNEL_IMAGE AnyKernel3/
        [ -f $DTBO_IMAGE ] && cp $DTBO_IMAGE AnyKernel3/
        
        # 更新AnyKernel配置
        echo "device.name1=$DEVICE_CODENAME" >> AnyKernel3/anykernel.sh
        echo "kernel.string=$KERNEL_NAME v${{ env.KERNEL_VERSION }}" >> AnyKernel3/anykernel.sh
        echo "do.devicecheck=0" >> AnyKernel3/anykernel.sh  # 禁用设备检查
        
        # 创建刷机包
        cd AnyKernel3
        zip -r9 ../${KERNEL_NAME}-${DEVICE_CODENAME}-${{ env.BUILD_DATE }}.zip *
        
        # 验证文件大小
        echo "Final ZIP file:"
        ls -lh ../*.zip

    - name: ⬆️ Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.KERNEL_NAME }}-${{ env.DEVICE_CODENAME }}-${{ env.BUILD_DATE }}
        path: ${{ env.KERNEL_NAME }}-${{ env.DEVICE_CODENAME }}-*.zip
        retention-days: 7
